package com.example.Tbank_fj_2024_COURSE_PROJECT.telegram.services;

import com.example.Tbank_fj_2024_COURSE_PROJECT.telegram.MovieBot;
import com.example.Tbank_fj_2024_COURSE_PROJECT.models.movie.Movie;
import com.example.Tbank_fj_2024_COURSE_PROJECT.models.movie.MovieStatus;
import com.example.Tbank_fj_2024_COURSE_PROJECT.models.movie.UserMovie;
import com.example.Tbank_fj_2024_COURSE_PROJECT.models.user.AppUser;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.*;

@Component
public class MessageSender  {

    private static final Logger logger = LoggerFactory.getLogger(MessageSender.class);

    private final MovieBot movieBot;
    private final SessionService sessionService;
    private final ObjectMapper objectMapper;

    @Autowired
    public MessageSender(@Lazy MovieBot bot, SessionService sessionService, ObjectMapper objectMapper) {
        this.movieBot = bot;
        this.sessionService = sessionService;
        this.objectMapper = objectMapper;
    }

    // –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    public void sendMainMenu(String chatId) {
        sessionService.clearUserState(chatId);
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("üìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:");

        InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();

        // –ö–Ω–æ–ø–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        rowsInline.add(createButtonRow("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º", "add_movie"));
        rowsInline.add(createButtonRow("‚úîÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã", "view_watched_movies"));
        rowsInline.add(createButtonRow("üìã –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã", "view_planned_movies"));
        rowsInline.add(createButtonRow("üë• –î—Ä—É–∑—å—è", "friends_menu"));

        markupInline.setKeyboard(rowsInline);
        message.setReplyMarkup(markupInline);

        sendMessage(message);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤
    public void sendWatchedMovies(String chatId, List<Movie> watchedMovies) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);

        StringBuilder sb = new StringBuilder("–í–∞—à–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã:\n");
        for (int i = 0; i < watchedMovies.size(); i++) {
            Movie movie = watchedMovies.get(i);
            sb.append(i + 1).append(". ").append(movie.getTitle()).append(" (").append(movie.getYear()).append(")\n");
        }
        sb.append("\n–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ñ–∏–ª—å–º, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–æ–º–µ—Ä.");

        message.setText(sb.toString());

        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> buttons = new ArrayList<>();
        buttons.add(
                List.of(
                        InlineKeyboardButton.builder()
                                .text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                                .callbackData("main_menu")
                                .build()
                )
        );
        inlineKeyboardMarkup.setKeyboard(buttons);
        message.setReplyMarkup(inlineKeyboardMarkup);

        try {
            movieBot.execute(message);
            logger.info("Watched movies message sent to chatId: {}", chatId);
        } catch (TelegramApiException e) {
            logger.error("Error sending watched movies to chatId: {}", chatId, e);
        }
    }

    public void sendPlannedMovies(String chatId, List<UserMovie> combinedPlannedMovies, AppUser currentUser) {
        if (combinedPlannedMovies.isEmpty()) {
            sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤.");
            sendMainMenu(chatId);
            return;
        }

        Set<String> addedMovieIds = new HashSet<>();
        StringBuilder response = new StringBuilder("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã (–≤–∞—à–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –¥—Ä—É–∑—å—è–º–∏):\n");

        int index = 1;
        for (UserMovie userMovie : combinedPlannedMovies) {
            Movie movie = userMovie.getMovie();
            String suggestedBy = userMovie.getSuggestedBy();

            if (addedMovieIds.add(movie.getImdbId())) {
                response.append(index++).append(". ").append(movie.getTitle())
                        .append(" (").append(movie.getYear()).append(")");

                if (userMovie.getStatus() == MovieStatus.WANT_TO_WATCH) {
                    response.append(" ‚Äî –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –≤–∞–º–∏\n");
                } else if (userMovie.getStatus() == MovieStatus.WANT_TO_WATCH_BY_FRIEND) {
                    response.append(" ‚Äî –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –¥—Ä—É–≥–æ–º ")
                            .append(suggestedBy != null ? suggestedBy : "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º").append("\n");
                }
            }
        }

        response.append("\n–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ñ–∏–ª—å–º, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–æ–º–µ—Ä.");

        InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        rowsInline.add(
                List.of(
                        InlineKeyboardButton.builder()
                                .text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                                .callbackData("main_menu")
                                .build()
                )
        );
        markupInline.setKeyboard(rowsInline);

        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(response.toString());
        message.setReplyMarkup(markupInline);

        try {
            movieBot.execute(message);
            logger.info("Planned movies message sent to chatId: {}", chatId);
        } catch (TelegramApiException e) {
            logger.error("Error sending planned movies to chatId: {}", chatId, e);
        }
    }


    // –ü—Ä–æ—Å—Ç–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    public void sendSimpleMovieList(String chatId, List<Movie> movies) {
        if (movies.isEmpty()) {
            sendMessage(chatId, "–§–∏–ª—å–º—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
            return;
        }

        InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();

        for (Movie movie : movies) {
            rowsInline.add(createButtonRow(movie.getTitle() + " (" + movie.getYear() + ")", "select_movie:" + movie.getImdbId()));
        }

        markupInline.setKeyboard(rowsInline);

        SendMessage message = new SendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:");
        message.setReplyMarkup(markupInline);

        sendMessage(message);
    }

    // –î–µ—Ç–∞–ª–∏ –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–º —Ñ–∏–ª—å–º–µ —Å –æ—Ü–µ–Ω–∫–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
    public void sendMovieDetails(String chatId, Movie movie, Double userRating, double averageFriendRating) {

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        String messageText = String.format(
                "–ù–∞–∑–≤–∞–Ω–∏–µ: %s\n–ì–æ–¥: %s\n–ú–æ—è –æ—Ü–µ–Ω–∫–∞: %s\n–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ —Å—Ä–µ–¥–∏ –¥—Ä—É–∑–µ–π: %.2f\n–û—Ü–µ–Ω–∫–∞ IMDb: %s",
                movie.getTitle(),
                movie.getYear(),
                (userRating != null ? userRating.toString() : "–ù–µ –æ—Ü–µ–Ω–µ–Ω–æ"),
                averageFriendRating,
                movie.getImdbRating()
        );

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        List<List<InlineKeyboardButton>> buttons = new ArrayList<>();

        // –ü–µ—Ä–≤—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
        buttons.add(
                List.of(
                        InlineKeyboardButton.builder()
                                .text("‚ùå –£–¥–∞–ª–∏—Ç—å")
                                .callbackData("delete_movie")
                                .build(),
                        InlineKeyboardButton.builder()
                                .text("‚≠ê –û—Ü–µ–Ω–∫–∞")
                                .callbackData("rate_movie")
                                .build()
                )
        );

        // –í—Ç–æ—Ä–æ–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
        buttons.add(
                List.of(
                        InlineKeyboardButton.builder()
                                .text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                                .callbackData("main_menu")
                                .build()
                )
        );

        // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Å—Ç–µ—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤–º–µ—Å—Ç–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        if (movie.getPoster() != null && !movie.getPoster().isEmpty() && !movie.getPoster().equals("N/A")) {
            movieBot.handlePhotoMessage(chatId, movie.getPoster(), messageText, buttons);
        } else {
            // –ï—Å–ª–∏ –ø–æ—Å—Ç–µ—Ä–∞ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
            sendMessageWithInlineKeyboard(chatId, messageText, buttons);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∏–ª—å–º –≤ —Å–µ—Å—Å–∏–∏
        sessionService.setSelectedMovie(chatId, movie);
    }


    // –î–µ—Ç–∞–ª–∏ –æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ñ–∏–ª—å–º–µ —Å –æ—Ü–µ–Ω–∫–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
    public void sendPlannedMovieDetailsWithOptions(String chatId, AppUser user, Movie movie, int userHype, double averageFriendHype, boolean isOwnMovie) {
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        String message = String.format(
                "–ù–∞–∑–≤–∞–Ω–∏–µ: %s\n–ì–æ–¥: %s\n–ú–æ–π –∞–∂–∏–æ—Ç–∞–∂: %d\n–ê–∂–∏–æ—Ç–∞–∂ —Å—Ä–µ–¥–∏ –¥—Ä—É–∑–µ–π: %.2f\n–û—Ü–µ–Ω–∫–∞ IMDb: %s",
                movie.getTitle(),
                movie.getYear(),
                userHype,
                averageFriendHype,
                movie.getImdbRating()
        );

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        List<List<InlineKeyboardButton>> buttons = new ArrayList<>();

        // –ü–µ—Ä–≤—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
        if (isOwnMovie) {
            buttons.add(
                    List.of(
                            InlineKeyboardButton.builder()
                                    .text("‚ùå –£–¥–∞–ª–∏—Ç—å")
                                    .callbackData("delete_planned")
                                    .build(),
                            InlineKeyboardButton.builder()
                                    .text("üî• –ê–∂–∏–æ—Ç–∞–∂")
                                    .callbackData("add_hype")
                                    .build()
                    )
            );
        } else {
            buttons.add(
                    List.of(
                            InlineKeyboardButton.builder()
                                    .text("üî• –ê–∂–∏–æ—Ç–∞–∂")
                                    .callbackData("add_hype")
                                    .build()
                    )
            );
        }

        // –í—Ç–æ—Ä–æ–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
        buttons.add(
                List.of(
                        InlineKeyboardButton.builder()
                                .text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                                .callbackData("main_menu")
                                .build()
                )
        );

        // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Å—Ç–µ—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤–º–µ—Å—Ç–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        if (movie.getPoster() != null && !movie.getPoster().isEmpty() && !movie.getPoster().equals("N/A")) {
            movieBot.handlePhotoMessage(chatId, movie.getPoster(), message, buttons);
        } else {
            // –ï—Å–ª–∏ –ø–æ—Å—Ç–µ—Ä–∞ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
            sendMessageWithInlineKeyboard(chatId, message, buttons);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∏–ª—å–º –≤ —Å–µ—Å—Å–∏–∏
        sessionService.setSelectedMovie(chatId, movie);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç–∞—Ç—É—Å–∞ —Ñ–∏–ª—å–º–∞
    public void processAddMovieStatusSelection(String chatId) {
        InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();

        // –ü–µ—Ä–≤—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫: –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∏ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω
        rowsInline.add(
                List.of(
                        InlineKeyboardButton.builder()
                                .text("üìã –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å")
                                .callbackData("selected_planned")
                                .build(),
                        InlineKeyboardButton.builder()
                                .text("‚úîÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω")
                                .callbackData("selected_watched")
                                .build()
                )
        );

        // –í—Ç–æ—Ä–æ–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        rowsInline.add(
                List.of(
                        InlineKeyboardButton.builder()
                                .text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                                .callbackData("main_menu")
                                .build()
                )
        );

        sessionService.setUserState(chatId, UserStateEnum.WAITING_FOR_MOVIE_TITLE);
        markupInline.setKeyboard(rowsInline);

        SendMessage message = new SendMessage(chatId, "üé¨ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–ª—è —Ñ–∏–ª—å–º–∞:");
        message.setReplyMarkup(markupInline);

        sendMessage(message);
    }

    // –ú–µ–Ω—é –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö –∏ –∏—Å—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥—Ä—É–∑—å—è
    public void sendFriendRequestsMenu(String chatId, List<AppUser> friendRequests, boolean isIncoming) {
        String header = isIncoming ? "üì• –í–∞—à–∏ –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã:" : "üì§ –í–∞—à–∏ –∏—Å—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã:";
        SendMessage message = new SendMessage(chatId, header);

        InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();

        for (AppUser request : friendRequests) {
            List<InlineKeyboardButton> rowInline = new ArrayList<>();
            if (isIncoming) {
                rowInline.add(createButton("‚úîÔ∏è –ü—Ä–∏–Ω—è—Ç—å: " + request.getUsername(), "accept_request:" + request.getUsername()));
                rowInline.add(createButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å: " + request.getUsername(), "reject_request:" + request.getUsername()));
            } else {
                rowInline.add(createButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å: " + request.getUsername(), "cancel_request:" + request.getUsername()));
            }
            rowsInline.add(rowInline);
        }

        markupInline.setKeyboard(rowsInline);
        message.setReplyMarkup(markupInline);

        sendMessage(message);
    }

    // –ú–µ–Ω—é –¥—Ä—É–∑–µ–π
    public void sendFriendsMenu(String chatId, List<AppUser> friends) {
        StringBuilder response = new StringBuilder("üë• –í–∞—à–∏ –¥—Ä—É–∑—å—è:\n");
        for (int i = 0; i < friends.size(); i++) {
            response.append(i + 1).append(". ").append(friends.get(i).getUsername()).append("\n");
        }

        InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();

        if (!friends.isEmpty()) {
            rowsInline.add(createButtonRow("‚ùå –£–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–∞", "delete_friend"));
        }
        rowsInline.add(createButtonRow("‚ûï –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å", "send_friend_request"));
        rowsInline.add(Arrays.asList(
                createButton("üì• –í—Ö–æ–¥—è—â–∏–µ –∑–∞—è–≤–∫–∏", "incoming_requests"),
                createButton("üì§ –ò—Å—Ö–æ–¥—è—â–∏–µ –∑–∞—è–≤–∫–∏", "outgoing_requests")
        ));
        rowsInline.add(createButtonRow("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"));

        markupInline.setKeyboard(rowsInline);
        SendMessage message = new SendMessage(chatId, response.toString());
        message.setReplyMarkup(markupInline);

        sendMessage(message);
    }


    // –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
    private List<InlineKeyboardButton> createButtonRow(String text, String callbackData) {
        return Arrays.asList(createButton(text, callbackData));
    }

    private InlineKeyboardButton createButton(String text, String callbackData) {
        return InlineKeyboardButton.builder().text(text).callbackData(callbackData).build();
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, —É–ø—Ä–æ—â–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞
    private void sendMessage(SendMessage message) {
        try {
            movieBot.execute(message);
            logger.info("Message sent to chatId: {}", message.getChatId());
        } catch (TelegramApiException e) {
            logger.error("Error sending message to chatId: {}", message.getChatId(), e);
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    public void sendMessage(String chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        sendMessage(message);
    }

    private void sendMessageWithInlineKeyboard(String chatId, String text, List<List<InlineKeyboardButton>> buttons) {
        SendMessage message = new SendMessage(chatId, text);
        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        inlineKeyboardMarkup.setKeyboard(buttons);
        message.setReplyMarkup(inlineKeyboardMarkup);
        sendMessage(message);
    }


}
